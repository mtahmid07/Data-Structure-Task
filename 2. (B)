#include <iostream>
#include <queue>
#include <cmath>
using namespace std;

struct Node
 {
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

class BST {
private:
    Node* root;

    void inorderTraversal(Node* node) {
        if (node == nullptr)
            return;
        inorderTraversal(node->left);
        cout << node->data << " ";
        inorderTraversal(node->right);
    }

    int calculateHeight(Node* node) {
        if (node == nullptr)
            return 0;
        int leftHeight = calculateHeight(node->left);
        int rightHeight = calculateHeight(node->right);
        return max(leftHeight, rightHeight) + 1;
    }

public:
    BST() {
        root = nullptr;
    }

    void insert(int val) {
        Node* newNode = new Node(val);
        if (root == nullptr) {
            root = newNode;
            return;
        }

        Node* current = root;
        Node* parent = nullptr;

        while (current != nullptr) {
            parent = current;
            if (val < current->data)
                current = current->left;
            else
                current = current->right;
        }

        if (val < parent->data)
            parent->left = newNode;
        else
            parent->right = newNode;
    }

    void deleteNode(int val) {
        Node* current = root;
        Node* parent = nullptr;

        while (current != nullptr && current->data != val) {
            parent = current;
            if (val < current->data)
                current = current->left;
            else
                current = current->right;
        }

        if (current == nullptr)
            return;

        if (current->left == nullptr && current->right == nullptr) {
            if (current != root) {
                if (parent->left == current)
                    parent->left = nullptr;
                else
                    parent->right = nullptr;
            } else {
                root = nullptr;
            }
            delete current;
        } else if (current->left && current->right) {
            Node* successor = current->right;
            Node* successorParent = current;

            while (successor->left != nullptr) {
                successorParent = successor;
                successor = successor->left;
            }

            current->data = successor->data;

            if (successorParent->left == successor)
                successorParent->left = successor->right;
            else
                successorParent->right = successor->right;

            delete successor;
        } else {
            Node* child = (current->left) ? current->left : current->right;

            if (current != root) {
                if (current == parent->left)
                    parent->left = child;
                else
                    parent->right = child;
            } else {
                root = child;
            }

            delete current;
        }
    }

    void printInOrder() {
        inorderTraversal(root);
        cout << endl;
    }

    int getHeight() {
        return calculateHeight(root);
    }
};

int main() {
    BST tree;

    tree.insert(50);
    tree.insert(30);
    tree.insert(70);
    tree.insert(20);
    tree.insert(40);
    tree.insert(60);
    tree.insert(80);

    cout << "Inorder Traversal of BST: ";
    tree.printInOrder();

    cout << "Deleting node 20..." << endl;
    tree.deleteNode(20);
    cout << "Inorder Traversal after deletion: ";
    tree.printInOrder();

    cout << "Height of BST: " << tree.getHeight() << endl;

    return 0;
}
